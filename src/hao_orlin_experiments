import networkx as nx
import math
#from hao_orlin_diff import Partition, hao_orlin
from queue import PriorityQueue
from typing import Union, Tuple


type NodeSet = set
type Cut_value = Union[int, float]
type ST_partition = Tuple[NodeSet, NodeSet]

class Partition:
    def __init__(self, value, data):
        self.value: Cut_value = value
        self.P = data['P']
        self.min_cut = data['cut']

    def __lt__(self, other):
        return self.value < other.value
    
    def __str__(self):
        return f'Partition with value {self.value}'


def hao_orlin_directed(G, s):


    def initialize():
        """
        Initializes the graph for the push-relabel algorithm.
        """
        for v in G.nodes:
            G.nodes[v]['excess'] = 0
            G.nodes[v]['height'] = 0
        G.nodes[s]['excess'] = math.inf
        G.nodes[s]['height'] = len(G.nodes)
        
        for u, v in G.edges:
            G.edges[u, v]['preflow'] = 0
            if not G.has_edge(v, u):
                G.add_edge(v, u, capacity=0)
            G.edges[v, u]['preflow'] = 0

        for v in list(G.neighbors(s)):
            push(s, v)

    def push(u, v):
        """
        Pushes flow from u to v.
        """
        if u in X:
            send = G.edges[u, v]['capacity'] - G.edges[u, v]['preflow']
        else:
            send = min(G.nodes[u]['excess'], G.edges[u, v]['capacity'] - G.edges[u, v]['preflow'])
        G.nodes[u]['excess'] -= send
        G.nodes[v]['excess'] += send
        G.edges[u, v]['preflow'] += send
        G.edges[v, u]['preflow'] -= send

        
        
        
        if v != s and v != t and G.nodes[v]['height'] < k and v not in ACTIVE_NODES: # and v!= t_prime
            ACTIVE_NODES.append(v)


    def relabel(u):
        """
        Relabels the height of node u.
        """
        nonlocal k
        nonlocal ACTIVE_NODES
        heights = []
        sorted_height_dict = get_sorted_node_heights()
        if(list(sorted_height_dict.values()).count(G.nodes[u]['height']) == 1):
            

            k = G.nodes[u]['height']
            
            if ACTIVE_NODES is not None:
                return
            for v in ACTIVE_NODES:
                if G.nodes[v]['height'] >= k:
                    ACTIVE_NODES.remove(v)
            return
        
        for v in G.neighbors(u):
            if G.edges[u, v]['capacity'] - G.edges[u, v]['preflow'] > 0:
                heights.append(G.nodes[v]['height'])
                min_height = min(heights)
        

        G.nodes[u]['height'] = min_height + 1

        if G.nodes[u]['height'] >= k:
            
            k = n - 1
            ACTIVE_NODES = [v for v in (V-{t}-{s}-{u}) if G.nodes[v]['excess'] > 0 and G.nodes[v]['height'] < k]
           


    def discharge(u):
        """
        Discharges the excess flow from node u.
        """
        for v in G.neighbors(u):
            if G.nodes[u]['height'] == G.nodes[v]['height'] + 1 and G.edges[u, v]['capacity'] - G.edges[u, v]['preflow'] > 0 and v not in X and G.nodes[u]['excess'] > 0:
                push(u, v)
                return  

        relabel(u)


    def get_sorted_node_heights():
        height_dict = {node: G.nodes[node]['height'] for node in G.nodes}
        sorted_height_dict = dict(sorted(height_dict.items(), key=lambda item: item[1]))

        return sorted_height_dict


    def get_cut_level():
        """
        Returns cut level of graph.
        """
        height_dict = {node: G.nodes[node]['height'] for node in G.nodes}  
        sorted_height_dict = dict(sorted(height_dict.items(), key=lambda item: item[1]))

        

        for node, height in sorted_height_dict.items():
            # Check if height only appears once
            if list(sorted_height_dict.values()).count(height) == 1:
                
                valid_neighbors = [v for v in G.neighbors(node) if G.edges[node, v]['preflow'] < G.edges[node, v]['capacity'] and v not in X]
                
                if all([height < G.nodes[v]['height'] for v in valid_neighbors]):
                    return height
                
        return n - 1
    

    def get_cut_value(S):
        """
        Returns the cut value of the graph.
        """
        return sum(G.edges[u, v]['capacity'] for u in S for v in G.neighbors(u) if v not in S) if S != V else math.inf

    def get_saturated_edges():
        """
        Returns the edges with saturated flow.
        """
        return [(u, v) for u, v in G.edges if G.edges[u, v]['preflow'] == G.edges[u, v]['capacity']]

    ACTIVE_NODES = [] # nodes with v positive excess and height(v) < k
    yeh_list = []
    V = set(G.nodes)
    X = {s}
    n = len(V)
    k = n - 1
    t = list(V - X)[0] if V != X else None
    t_prime = None
    min_cut_value = math.inf
    cut = set()

    initialize()    

    while X != V:
        
        while ACTIVE_NODES: # TODO: ACTIVE NODES may be empty at some point
            
            u = ACTIVE_NODES.pop()
            # print("u:")
            # print(u)
            # print("k")
            # print(k)
            discharge(u)
            # k = get_cut_level()
            # 
            # for u in G.nodes:
            #     if u in ACTIVE_NODES:
            #         ACTIVE_NODES.remove(u)
            #     if G.nodes[u]['excess'] > 0 and G.nodes[u]['height'] < k and u != t and u not in X:
            #         ACTIVE_NODES.append(u)
            # 
            if G.nodes[u]['excess'] > 0 and G.nodes[u]['height'] < k and u not in ACTIVE_NODES:
                ACTIVE_NODES.append(u)
        
        S = set([i for i in V if G.nodes[i]['height'] >= k and i != t])
        # print("S in hao orlin:")
        # print(S)
        # print("höhen aller knoten:")
        # for i in V:
        #     print(G.nodes[i])
        #     print(G.nodes[i]['height'])
        # k = get_cut_level()

        current_cut_value = G.nodes[t]['excess'] # aber der cut ist dann falsch???
        current_cut_value = get_cut_value(S)
        min_cut_value = current_cut_value
        cut = (S.copy(), V - S)
        P = (X.copy(), {t})

        yeh_list.append(Partition(min_cut_value, {'P': P, 'cut': cut}))

        X.add(t)
        G.nodes[t]['height'] = n
        t_prime = min((v for v in (V - X)), key=lambda v: G.nodes[v]['height']) if V != X else None

        G.nodes[t]['excess'] = math.inf
        for v in G.neighbors(t):
            push(t, v)
        
        t = t_prime
        if t in ACTIVE_NODES:
            ACTIVE_NODES.remove(t)

        if t == None or G.nodes[t]['height'] >= k:
            k = n -1
            ACTIVE_NODES = [v for v in (V-{t}-{s}) if G.nodes[v]['excess'] > 0 and G.nodes[v]['height'] < k]
        
    return yeh_list
def hao_orlin(G, s):
    return hao_orlin_directed(G, s) if G.is_directed() else hao_orlin_directed(G.to_directed(), s)
if __name__ == '__main__':
    G = nx.DiGraph()
    G.add_edge('S', 'B', capacity=4)
    G.add_edge('S', 'D', capacity=8)
    G.add_edge('B', 'D', capacity=4)
    
    s = 'S'  # Startknoten für den Hao-Orlin-Algorithmus
    yeh_list = hao_orlin(G, s)
    

    print(yeh_list)
    for partition in yeh_list:
        print(partition)
        # print("Min Cut Value:", partition.min_cut_value)
        # print("P:", partition.details['P'])
        # print("Cut:", partition.details['cut'])